Unit doomdata;

{$MODE ObjFPC}{$H+}

Interface

Uses
  ufpc_doom_types, Classes, SysUtils
  // The most basic types we use, portability.
  , doomtype
  // Some global defines, that configure the game.
  , doomdef
  ;

//
// Map level types.
// The following data structures define the persistent format
// used in the lumps of the WAD files.
//
Const
  // Lump order in a map WAD: each map needs a couple of lumps
  // to provide a complete scene geometry description.
  ML_LABEL = 0; // A separator, name, ExMx or MAPxx
  ML_THINGS = 1; // Monsters, items..
  ML_LINEDEFS = 2; // LineDefs, from editing
  ML_SIDEDEFS = 3; // SideDefs, from editing
  ML_VERTEXES = 4; // Vertices, edited and BSP splits generated
  ML_SEGS = 5; // LineSegs, from LineDefs split by BSP
  ML_SSECTORS = 6; // SubSectors, list of LineSegs
  ML_NODES = 7; // BSP nodes
  ML_SECTORS = 8; // Sectors, from editing
  ML_REJECT = 9; // LUT, sector-sector visibility
  ML_BLOCKMAP = 10; // LUT, motion clipping, walls/grid element

  NF_SUBSECTOR_VANILLA = $8000;
  NF_SUBSECTOR = $80000000; // [crispy] extended nodes
  NO_INDEX = ($FFFF); // [crispy] extended nodes

Type
  // A single Vertex.
  mapvertex_t = Packed Record
    x: short;
    y: short;
  End;

  // A SideDef, defining the visual appearance of a wall,
  // by setting textures and offsets.
  mapsidedef_t = Packed Record

    textureoffset: short;
    rowoffset: short;
    toptexture: Array[0..7] Of char;
    bottomtexture: Array[0..7] Of char;
    midtexture: Array[0..7] Of char;
    // Front sector, towards viewer.
    sector: short;
  End;

  // A LineDef, as used for editing, and as input
  // to the BSP builder.
  maplinedef_t = Packed Record
    v1: unsigned_short; // [crispy] extended nodes
    v2: unsigned_short; // [crispy] extended nodes
    flags: unsigned_short; // [crispy] extended nodes
    special: short;
    tag: short;
    // sidenum[1] will be -1 (NO_INDEX) if one sided
    sidenum: Array[0..1] Of unsigned_short; // [crispy] extended nodes
  End;

  //// [crispy] allow loading of Hexen-format maps
  //// taken from chocolate-doom/src/hexen/xddefs.h:63-75
  //typedef PACKED_STRUCT (
  //{
  //    short v1;
  //    short v2;
  //    short flags;
  //    byte special;
  //    byte arg1;
  //    byte arg2;
  //    byte arg3;
  //    byte arg4;
  //    byte arg5;
  //    short sidenum[2];
  //}) maplinedef_hexen_t;
Const
  //
  // LineDef attributes.
  //

  // Solid, is an obstacle.
  ML_BLOCKING = 1;

  // Blocks monsters only.
  ML_BLOCKMONSTERS = 2;

  // Backside will not be present at all
  //  if not two sided.
  ML_TWOSIDED = 4;

  // If a texture is pegged, the texture will have
  // the end exposed to air held constant at the
  // top or bottom of the texture (stairs or pulled
  // down things) and will move with a height change
  // of one of the neighbor sectors.
  // Unpegged textures allways have the first row of
  // the texture at the top pixel of the line for both
  // top and bottom textures (use next to windows).

  // upper texture unpegged
  ML_DONTPEGTOP = 8;

  // lower texture unpegged
  ML_DONTPEGBOTTOM = 16;

  // In AutoMap: don't map as two sided: IT'S A SECRET!
  ML_SECRET = 32;

  // Sound rendering: don't let sound cross two of these.
  ML_SOUNDBLOCK = 64;

  // Don't draw on the automap at all.
  ML_DONTDRAW = 128;

  // Set if already seen, thus drawn in automap.
  ML_MAPPED = 256;

Type
  // Sector definition, from editing.
  mapsector_t = Packed Record
    floorheight: short;
    ceilingheight: short;
    floorpic: Array[0..7] Of char;
    ceilingpic: Array[0..7] Of char;
    lightlevel: short;
    special: short;
    tag: short;
  End;

  // SubSector, as generated by BSP.
  mapsubsector_t = Packed Record
    numsegs: unsigned_short; // [crispy] extended nodes
    // Index of first one, segs are stored sequentially.
    firstseg: unsigned_short; // [crispy] extended nodes
  End;

  // [crispy] allow loading of maps with DeePBSP nodes
  // taken from prboom-plus/src/doomdata.h:163-166
  //typedef PACKED_STRUCT (
  //{
  //    unsigned short numsegs;
  //    int firstseg;
  //}) mapsubsector_deepbsp_t;

  //// [crispy] allow loading of maps with ZDBSP nodes
  //// taken from prboom-plus/src/doomdata.h:168-170
  //typedef PACKED_STRUCT (
  //{
  //    unsigned int numsegs;
  //}) mapsubsector_zdbsp_t;

  // LineSeg, generated by splitting LineDefs
  // using partition lines selected by BSP builder.
  mapseg_t = Packed Record
    v1: unsigned_short; // [crispy] extended nodes
    v2: unsigned_short; // [crispy] extended nodes
    angle: short;
    linedef: unsigned_short; // [crispy] extended nodes
    side: short;
    offset: short;
  End;

  //// [crispy] allow loading of maps with DeePBSP nodes
  //// taken from prboom-plus/src/doomdata.h:183-190
  //typedef PACKED_STRUCT (
  //{
  //    int v1;
  //    int v2;
  //    unsigned short angle;
  //    unsigned short linedef;
  //    short side;
  //    unsigned short offset;
  //}) mapseg_deepbsp_t;

  //// [crispy] allow loading of maps with ZDBSP nodes
  //// taken from prboom-plus/src/doomdata.h:192-196
  //typedef PACKED_STRUCT (
  //{
  //    unsigned int v1, v2;
  //    unsigned short linedef;
  //    unsigned char side;
  //}) mapseg_zdbsp_t;


  // BSP node structure.
  mapnode_t = Packed Record
    // Partition line from (x,y) to x+dx,y+dy)
    x: Short;
    y: Short;
    dx: Short;
    dy: Short;

    // Bounding box for each child,
    // clip against view frustum.
    bbox: Array[0..1, 0..3] Of short;

    // If NF_SUBSECTOR its a subsector,
    // else it's a node of another subtree.
    children: Array[0..1] Of unsigned_short;
  End;

  //// [crispy] allow loading of maps with DeePBSP nodes
  //// taken from prboom-plus/src/doomdata.h:216-225
  //typedef PACKED_STRUCT (
  //{
  //    short x;
  //    short y;
  //    short dx;
  //    short dy;
  //    short bbox[2][4];
  //    int children[2];
  //}) mapnode_deepbsp_t;

  //// [crispy] allow loading of maps with ZDBSP nodes
  //// taken from prboom-plus/src/doomdata.h:227-136
  //typedef PACKED_STRUCT (
  //{
  //    short x;
  //    short y;
  //    short dx;
  //    short dy;
  //    short bbox[2][4];
  //    int children[2];
  //}) mapnode_zdbsp_t;


  // Thing definition, position, orientation and type,
  // plus skill/visibility flags and attributes.
  mapthing_t = Packed Record
    x: short;
    y: short;
    angle: short;
    _type: short;
    options: short;
  End;


  //// [crispy] allow loading of Hexen-format maps
  //// taken from chocolate-doom/src/hexen/xddefs.h:134-149
  //typedef PACKED_STRUCT (
  //{
  //    short tid;
  //    short x;
  //    short y;
  //    short height;
  //    short angle;
  //    short type;
  //    short options;
  //    byte special;
  //    byte arg1;
  //    byte arg2;
  //    byte arg3;
  //    byte arg4;
  //    byte arg5;
  //}) mapthing_hexen_t;



Implementation

End.

